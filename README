###########################################################################
## ---------------------------------------------------------------------  #
##  Scripts for CURRENNT						  #
## ---------------------------------------------------------------------  #
###########################################################################
##                         Author: Xin WANG                               #
##                         Contact: wangxin@nii.ac.jp                     #
##                         Date:  2016-05-30                              #
###########################################################################

## ----------------------- MESSAGE  ------------------------------------  #
I use the scripts to train networks for speech synthesis. Thus, this set of
scripts originally contained features for specific task (e.g. MLPG
for generating the acoustic feature trajectory, vocoder, RMSE calculation)

However, module for vocoder, MLPG generation and RMSE calculation are removed. 
(although the target feature of the data set in EXAMPLE contains delta and 
delta-delta components, the script will directly use the static component as
output. No MLPG generation is used here)

At last, I only test this on the server of my group.

And, the code may be dirty !

## ----------------------- REQUIREMENTS--------------------------------  #
1. CURRENNT ToolKit, modified version by me
   CURRENNT requires: 
   1.1 netcdf http://www.unidata.ucar.edu/software/netcdf/
   1.2 Boost  (headers and compiled library) http://www.boost.org
   1.3 CUDA > 6.5 (CURRENNT is modified  for CUDA > 6.5, according to
       http://sourceforge.net/p/currennt/discussion/general/thread/df6eeece/
       http://sourceforge.net/p/currennt/discussion/general/thread/e10ef414/)
   ...
   Follow the CURRENNT/README instruction to install CURRENNT.

2. A small Python toolkit (pyTools) from my github
   This toolkit requires
   2.1 Cython (to compile a binary interface)
   2.2 Scipy and Numpy 

## ----------------------- USAGE   ------------------------------------  #

---- For running the EXAMPLE:

1. Aompile and add 'currennt' to your path. Check command below
   terminal: ~$ currennt --list_devices 1
   
2. Add PYTHONPATH to the python toolkit
   terminal: ~$ export PYTHONPATH=PATH_TO_PYTOOLS:$PYTHONPATH

3. Select one example configuration and run
   terminal: ~$ perl 001_RUN.pl CONFIGPOOLS/config_***.pm
  
4. check the printed information (a lots of) on the screen. You should see
   
   """
   Generating features to ***
   ==================================================================
    --- All Done ---  at ***
   ==================================================================
   """

5. If you want to see the commandline for each step, add '1' as the argument
   it will print all the commands executed in step 4.   
   terminal: ~$ perl 001_RUN.pl CONFIGPOOLS/config_***.pm 1

6. List of examples:
   config_DNN.pm:         the deep feedforward neural network
                          for RNN example, please see the help of CURRENNT
                          and modify the network.jsn

   config_DNN_WEIGHT.pm   the deep feedforward neural network with weight mask.
   			  the weight mask set part of the network connection as zero.
                          I use this weight mask to create multi-stream network.
			  please use EXAMPLE/MODEL_DNN_WEIGHT/createWeightMask.py to create
                          the weight mask. please check /EXAMPLE/MODEL_DNN_WEIGHT/config.cfg
                          on the option to use weight mask

   config_DNN_WE.pm:      the deep feedforward neural network with word vectors as input
                          note, the word vectors are stored in a binary data file 
                          EXAMPLE/RAWDATA/we.webank_s, the dimension is 80.
			  also, please check /EXAMPLE/MODEL_DNN_WE/README to see
                          the instruction on writing the config.cfg file
   
   config_HIGHWAY.pm:     the highway network.
                          It is similar to DNN network, except the network.jsn.
                          please read EXAMPLE/MODEL_HIGHWAY/README to know how to 
                          create the network.jsn for highway network
                          
			  residual network, a specical case of highway can also be created
                          by simply creating the network.jsn

   config_MDN_1.pm:       
   config_MDN_2.pm:       the mixture density network (MDN)
                          I normally initialize MDN based on a trained RNN or DNN network.
                          It is not suggested to directly train MDN from scratch.
			  config_MDN_1.pm: train the DNN network
   			  config_MDN_2.pm: train the MDN based on the MDN
			  please check EXAMPLE/MODEL_MDN/README
   
   config_ARRMDN.pm       the Auto-regressive Recurrent Mixture Density Network
                          please check EXAMPLE/MODEL_ARRMDN/README


7 The example consists of several steps:
  7.1. packing the training data into netCDF (.nc) files
    1.1 built the .scp for each kind of input/output feature
    1.2 build .nc files
    1.3 calculate mean, variance
    1.4 normalize the data
  7.2. train the network
  7.3. packing the test data
  7.4. generate the data


---- For system training on your own data:
Please make sure that all the binary data are float32, little-endian.
Download the package again, and check the clean EXAMPLE directory carefully.
Basically, that's what you need:

1. DATA: directory for training data
   1.1 data_config.py: configuration on the training data. 
       		       Follow the EXAMPLE/DATA/data_config.py and prepare

   1.2 *.scp: 	       lists of paths to your training data
       		       (both input and output to the neural network)

2. TESTDATA: directory for test data
   2.1 data_config.py: configuration on the training data. 
       		       Follow the EXAMPLE/TESTDATA/data_config.py and prepare

   2.2 *.scp: 	       lists of paths to the test data 
       		       (only input to the network)

3. MODEL: the directory for neural network training 
   3.1 config.cfg:     configuration for network training (for currennt)

   3.2 config_syn.cfg: configuration used during generation (for currennt)

   3.3 network.jsn:    network structure  

   3.4 MDN, Highway, word vectors require additional configuration files

       3.4.1 EXAMPLE/MODEL_MDN/createMDNConfig.py: 
       	     script to generate the configuration of the MDN layer

       3.4.2 EXAMPLE/MODEL_DNN_WEIGHT/createWeightMask.py: 
       	     script to generate the weight mask

Besides, you also need
4. config_***.pm:	the control panel on the operation of your system.
   			please check CONFIGPOOLS/config_***.pm


---- For example:
If I want to train a MDN network on my own data, I will:

1. In DATA/directory
   1.1 prepare *.scp
   1.2 prepare data_config.py

2. In TESTDATA/directory
   2.1 prepare *.scp
   2.2 prepare data_config.py

3. In MODEL
   3.1 prepare config.cfg, config_syn.cfg
   3.2 prepare network.jsn
   3.3 for MDN, 
       3.3.1 prepare createMDNConfig.py
       3.3.2 python createMDNConfig.py to get mdn.config
   3.4 for weight mask
       3.4.1 prepare createWeightMask.py
       3.4.2 python createWeightMask.py to get weightMask
   
   3.5 check network.jsn is compatible with mdn.config or weightMask
   
4. Prepare CONFIGPOOLS/config.pm

5. perl 001_RUN.pl CONFIGPOOLS/config.pm


## ----------------------- AT LAST   ------------------------------------  #
There are many options in scripts and CURRENNT without instructions. 
I will add instructions later.

